AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WM Title API

Resources:
  BasicAuthDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        # Read from parameters
        TableName: wm_basic_auth
        AttributeDefinitions:
          - AttributeName: "key"
            AttributeType: "S"   
        KeySchema:
          - AttributeName: "key"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        SSESpecification:
          SSEEnabled: "true"

  TitlesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        # Read from parameters
        TableName: wm_titles
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification:
          SSEEnabled: "true"

  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/titles-auth"
  TitleAddLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/titles-api-add"
  TitleUpdateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/titles-api-update"
  TitleDeleteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/titles-api-delete"
  TitleGetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/titles-api-get"

  TitlesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName : TitlesLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"  
      Description: "IAM Role for WM Title API"
      Path: "/"
      Policies:
        - PolicyName: TitleDynamoDbAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
                - "dynamodb:DescribeTable"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                Resource:
                  - Fn::Sub: "arn:aws:dynamodb:*:${AWS::AccountId}:table/wm_titles*"
        - PolicyName: LogAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "logs:CreateLogStream"
                - "logs:CreateLogGroup"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/titles-api*:*"
              - Effect: "Allow"
                Action:
                - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/titles-api*:*:*"

  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName : AuthLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"  
      Description: "IAM Role for WM Title API"
      Path: "/"
      Policies:
        - PolicyName: TitlesAuthDynamoDbAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
                - "dynamodb:DescribeTable"
                # Ideally authorizer should not have add/update/delete access to the keys
                # This is only for the purpose of automating basic auth table initial values
                - "dynamodb:PutItem"
                Resource:
                  - Fn::Sub: "arn:aws:dynamodb:*:${AWS::AccountId}:table/wm_basic_auth*"
        - PolicyName: LogAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "logs:CreateLogStream"
                - "logs:CreateLogGroup"
                - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/titles-auth*"
              
  AuthFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - AuthLambdaRole
      - AuthLogGroup
    Properties:
      CodeUri: ./
      Handler: auth.handler
      Runtime: nodejs12.x
      FunctionName: titles-auth
      Environment:
        Variables:
          AUTH_TABLE: wm_basic_auth
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/AuthLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
  
  TitlesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn

  TitlesGetFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - TitlesLambdaRole
      - TitleGetLogGroup
    Properties:
      CodeUri: ./
      Handler: index.get
      Runtime: nodejs12.x
      FunctionName: titles-api-get
      Environment:
        Variables:
          TITLES_TABLE: wm_titles
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/TitlesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        TitlesGet:
          Type: Api 
          Properties:
            RestApiId: !Ref TitlesApi
            Path: /titles/{id}
            Method: get
            
  TitlesAddFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - TitlesLambdaRole
      - TitleAddLogGroup
    Properties:
      CodeUri: ./
      Handler: index.add
      Runtime: nodejs12.x
      FunctionName: titles-api-add
      Environment:
        Variables:
          TITLES_TABLE: wm_titles
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/TitlesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        TitlesAdd:
          Type: Api 
          Properties:
            RestApiId: !Ref TitlesApi
            Path: /titles
            Method: post

  TitlesUpdateFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - TitlesLambdaRole
      - TitleUpdateLogGroup
    Properties:
      CodeUri: ./
      Handler: index.update
      Runtime: nodejs12.x
      FunctionName: titles-api-update
      Environment:
        Variables:
          TITLES_TABLE: wm_titles
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/TitlesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        TitlesUpdate:
          Type: Api 
          Properties:
            RestApiId: !Ref TitlesApi
            Path: /titles/{id}
            Method: put

  TitlesDeleteFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - TitlesLambdaRole
      - TitleDeleteLogGroup
    Properties:
      CodeUri: ./
      Handler: index.delete
      Runtime: nodejs12.x
      FunctionName: titles-api-delete
      Environment:
        Variables:
          TITLES_TABLE: wm_titles
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/TitlesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        TitlesDelete:
          Type: Api 
          Properties:
            RestApiId: !Ref TitlesApi
            Path: /titles/{id}
            Method: delete

Outputs:
  TitlesGetApi:
    Description: "API Gateway endpoint URL for Prod stage for Titles Add function"
    Value: !Sub "https://${TitlesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/titles/{id}"
  TitlesAddApi:
    Description: "API Gateway endpoint URL for Prod stage for Titles Get function"
    Value: !Sub "https://${TitlesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/titles"
  TitlesUpdateApi:
    Description: "API Gateway endpoint URL for Prod stage for Titles Update function"
    Value: !Sub "https://${TitlesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/titles/{id}"
  TitlesDeleteApi:
    Description: "API Gateway endpoint URL for Prod stage for Titles Delete function"
    Value: !Sub "https://${TitlesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/titles/{id}"