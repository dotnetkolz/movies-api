AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Movies api

Resources:
  MoviesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        # Read from parameters
        TableName: movies
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  MovieTestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/movies-api-movieTest"
  MovieAddLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/movies-api-movieAdd"
  MovieUpdateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/movies-api-movieUpdate"
  MovieDeleteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/movies-api-movieDelete"
  MovieGetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/movies-api-movieGet"

  MoviesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName : MoviesLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"  
      Description: "IAM Role for WM Movies API"
      Path: "/"
      Policies:
        - PolicyName: MobileDynamoDbAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
                - "dynamodb:DescribeTable"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                Resource:
                  - Fn::Sub: "arn:aws:dynamodb:*:${AWS::AccountId}:table/movies*"
        - PolicyName: LogAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "logs:CreateLogStream"
                - "logs:CreateLogGroup"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/movies-api*:*"
              - Effect: "Allow"
                Action:
                - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/movies-api*:*:*"
  MoviesGetFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MoviesLambdaRole
      - MovieTestLogGroup
    Properties:
      CodeUri: ./
      Handler: index.get
      Runtime: nodejs12.x
      FunctionName: movies-api-movieGet
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/MoviesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        MoviesGet:
          Type: Api 
          Properties:
            Path: /movies/{id}
            Method: get
            
  MoviesAddFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MoviesLambdaRole
      - MovieTestLogGroup
    Properties:
      CodeUri: ./
      Handler: index.add
      Runtime: nodejs12.x
      FunctionName: movies-api-movieAdd
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/MoviesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        MoviesAdd:
          Type: Api 
          Properties:
            Path: /movies
            Method: post

  MoviesUpdateFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MoviesLambdaRole
      - MovieTestLogGroup
    Properties:
      CodeUri: ./
      Handler: index.update
      Runtime: nodejs12.x
      FunctionName: movies-api-movieUpdate
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/MoviesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        MoviesUpdate:
          Type: Api 
          Properties:
            Path: /movies/{id}
            Method: put

  MoviesDeleteFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MoviesLambdaRole
      - MovieTestLogGroup
    Properties:
      CodeUri: ./
      Handler: index.delete
      Runtime: nodejs12.x
      FunctionName: movies-api-movieDelete
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/MoviesLambdaRole"
      Policies:
      - "AWSLambdaBasicExecutionRole"
      Events:
        MoviesDelete:
          Type: Api 
          Properties:
            Path: /movies/{id}
            Method: delete

Outputs:
  MoviesGetApi:
    Description: "API Gateway endpoint URL for Prod stage for Movies Add function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/movies/{id}"
  MoviesAddApi:
    Description: "API Gateway endpoint URL for Prod stage for Movies Get function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/movies"
  MoviesUpdateApi:
    Description: "API Gateway endpoint URL for Prod stage for Movies Update function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/movies/{id}"
  MoviesDeleteApi:
    Description: "API Gateway endpoint URL for Prod stage for Movies Delete function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/movies/{id}"